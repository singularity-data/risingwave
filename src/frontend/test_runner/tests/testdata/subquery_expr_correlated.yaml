# This file is automatically generated. See `src/frontend/test_runner/README.md` for more information.
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y=t2.y and t2.y = 1000)
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > (1.5:Decimal * min(t2.x))) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [(1.5:Decimal * min(t2.x))] }
            LogicalAgg { aggs: [min(t2.x)] }
              LogicalProject { exprs: [t2.x] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) AND (t2.y = 1000:Int32) }
                  LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: (t1.y = t2.y) AND (t1.x > (1.5:Decimal * min(t2.x))) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t2.y, (1.5:Decimal * min(t2.x))] }
        LogicalAgg { group_key: [t2.y], aggs: [min(t2.x)] }
          LogicalProject { exprs: [t2.y, t2.x] }
            LogicalScan { table: t2, output_columns: [x, y], required_columns: [x, y], predicate: (t2.y = 1000:Int32) }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t2.y = (select t1.y))
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > min(t2.x)) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [min(t2.x)] }
            LogicalAgg { aggs: [min(t2.x)] }
              LogicalProject { exprs: [t2.x] }
                LogicalFilter { predicate: (t2.y = CorrelatedInputRef { index: 2, correlated_id: 1 }) }
                  LogicalJoin { type: LeftOuter, on: true }
                    LogicalScan { table: t2, columns: [_row_id, x, y] }
                    LogicalProject { exprs: [CorrelatedInputRef { index: 2, correlated_id: 1 }] }
                      LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t1.y=t2.y and t1.x=(select max(x) from t3, (select 1) as dummy where t3.y=t1.y))
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > min(t2.x)) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [min(t2.x)] }
            LogicalAgg { aggs: [min(t2.x)] }
              LogicalProject { exprs: [t2.x] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) AND (CorrelatedInputRef { index: 1, correlated_id: 1 } = max(t3.x)) }
                  LogicalJoin { type: LeftOuter, on: true }
                    LogicalScan { table: t2, columns: [_row_id, x, y] }
                    LogicalProject { exprs: [max(t3.x)] }
                      LogicalAgg { aggs: [max(t3.x)] }
                        LogicalProject { exprs: [t3.x] }
                          LogicalFilter { predicate: (t3.y = CorrelatedInputRef { index: 2, correlated_id: 1 }) }
                            LogicalJoin { type: Inner, on: true }
                              LogicalScan { table: t3, columns: [_row_id, x, y] }
                              LogicalProject { exprs: [1:Int32] }
                                LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select * from t2 where y = 100 and t1.x = t2.x and x = 1000 and t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalApply { type: LeftSemi, on: true, correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.x, t2.y] }
          LogicalFilter { predicate: (t2.y = 100:Int32) AND (CorrelatedInputRef { index: 1, correlated_id: 1 } = t2.x) AND (t2.x = 1000:Int32) AND (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.x = t2.x) AND (t1.y = t2.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalScan { table: t2, output_columns: [x, y], required_columns: [x, y], predicate: (t2.y = 100:Int32) AND (t2.x = 1000:Int32) }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > (1.5:Decimal * min(t2.x))) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [(1.5:Decimal * min(t2.x))] }
            LogicalAgg { aggs: [min(t2.x)] }
              LogicalProject { exprs: [t2.x] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) }
                  LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: (t1.y = t2.y) AND (t1.x > (1.5:Decimal * min(t2.x))) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t2.y, (1.5:Decimal * min(t2.x))] }
        LogicalAgg { group_key: [t2.y], aggs: [min(t2.x)] }
          LogicalProject { exprs: [t2.y, t2.x] }
            LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > count) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [count] }
            LogicalAgg { aggs: [count] }
              LogicalProject { exprs: [] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) }
                  LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: (t1.y = t2.y) AND (t1.x > count) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalAgg { group_key: [t2.y], aggs: [count] }
        LogicalScan { table: t2, columns: [y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) + count(*) from t2 where t1.y = t2.y);
  logical_plan: |
    LogicalProject { exprs: [t1.x, t1.y] }
      LogicalFilter { predicate: (t1.x > (count + count)) }
        LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
          LogicalScan { table: t1, columns: [_row_id, x, y] }
          LogicalProject { exprs: [(count + count)] }
            LogicalAgg { aggs: [count, count] }
              LogicalProject { exprs: [] }
                LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t2.y) }
                  LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: Inner, on: (t1.y = t2.y) AND (t1.x > (count + count)) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t2.y, (count + count)] }
        LogicalAgg { group_key: [t2.y], aggs: [count, count] }
          LogicalScan { table: t2, columns: [y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x = t2.x);
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalApply { type: LeftSemi, on: (t1.y = t2.y), correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.y] }
          LogicalFilter { predicate: (CorrelatedInputRef { index: 1, correlated_id: 1 } = t2.x) }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t2.y) AND (t1.x = t2.x) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t2.y, t2.x] }
        LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y not in (select y from t2 where t1.x = t2.x);
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x + t2.x = 100 and t1.y = 1000);
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalApply { type: LeftSemi, on: (t1.y = t2.y), correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.y] }
          LogicalFilter { predicate: ((CorrelatedInputRef { index: 1, correlated_id: 1 } + t2.x) = 100:Int32) AND (CorrelatedInputRef { index: 2, correlated_id: 1 } = 1000:Int32) }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t2.y) AND ((t1.x + t2.x) = 100:Int32) }
      LogicalScan { table: t1, output_columns: [x, y], required_columns: [x, y], predicate: (t1.y = 1000:Int32) }
      LogicalProject { exprs: [t2.y, t2.x] }
        LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x > t2.x + 1000);
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalApply { type: LeftSemi, on: (t1.y = t2.y), correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.y] }
          LogicalFilter { predicate: (CorrelatedInputRef { index: 1, correlated_id: 1 } > (t2.x + 1000:Int32)) }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t2.y) AND (t1.x > (t2.x + 1000:Int32)) }
      LogicalProject { exprs: [t1.x, t1.y, t1.x] }
        LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t2.y, (t2.x + 1000:Int32)] }
        LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y, x from t2 where t1.x > t2.x + 1000);
  binder_error: 'Bind error: Subquery must return only one column'
- sql: |
    /* correlated outer subquery with an uncorrelated inner subquery */
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where t2.y = t1.y and x > (select min(x) from t3));
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalApply { type: LeftSemi, on: (t1.y = t2.x), correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.x] }
          LogicalFilter { predicate: (t2.y = CorrelatedInputRef { index: 2, correlated_id: 1 }) AND (t2.x > min(t3.x)) }
            LogicalJoin { type: LeftOuter, on: true }
              LogicalScan { table: t2, columns: [_row_id, x, y] }
              LogicalProject { exprs: [min(t3.x)] }
                LogicalAgg { aggs: [min(t3.x)] }
                  LogicalProject { exprs: [t3.x] }
                    LogicalScan { table: t3, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t2.x) AND (t2.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: Inner, on: (t2.x > min(t3.x)) }
        LogicalScan { table: t2, columns: [x, y] }
        LogicalAgg { aggs: [min(t3.x)] }
          LogicalScan { table: t3, columns: [x] }
- sql: |
    /* correlated inner subquery with depth = 2 */
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where y in (select y from t3 where t1.y = t3.y));
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalApply { type: LeftSemi, on: (t1.y = t2.x), correlated_id: 1 }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.x] }
          LogicalJoin { type: LeftSemi, on: (t2.y = t3.y) }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
            LogicalProject { exprs: [t3.y] }
              LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 1 } = t3.y) }
                LogicalScan { table: t3, columns: [_row_id, x, y] }
- sql: |
    /* uncorrelated outer subquery with a correlated inner subquery */
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where y in (select y from t3 where t2.y = t3.y));
  logical_plan: |
    LogicalProject { exprs: [t1.x] }
      LogicalJoin { type: LeftSemi, on: (t1.y = t2.x) }
        LogicalScan { table: t1, columns: [_row_id, x, y] }
        LogicalProject { exprs: [t2.x] }
          LogicalApply { type: LeftSemi, on: (t2.y = t3.y), correlated_id: 2 }
            LogicalScan { table: t2, columns: [_row_id, x, y] }
            LogicalProject { exprs: [t3.y] }
              LogicalFilter { predicate: (CorrelatedInputRef { index: 2, correlated_id: 2 } = t3.y) }
                LogicalScan { table: t3, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t2.x) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: LeftSemi, on: (t2.y = t3.y) AND (t2.y = t3.y) }
        LogicalScan { table: t2, columns: [x, y] }
        LogicalProject { exprs: [t3.y, t3.y] }
          LogicalScan { table: t3, columns: [y] }
- sql: |
    /* correlated agg column in SELECT */
    create table t (v1 int, v2 int);
    select min(v1), (select max(v2)) from t;
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated group column in SELECT */
    create table t (v1 int, v2 int);
    select min(v1), (select v2) from t group by v2;
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated non-group column in SELECT */
    create table t (v1 int, v2 int);
    select min(v1), (select v2) from t;
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated agg column in HAVING */
    create table t (v1 int, v2 int);
    select 1 from t having min(v1) > (select max(v2));
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated group column in HAVING */
    create table t (v1 int, v2 int);
    select 1 from t group by v2 having min(v1) > (select v2);
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated non-group column in HAVING */
    create table t (v1 int, v2 int);
    select 1 from t having min(v1) > (select v2);
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    /* correlated agg column belongs to outer query */
    create table t (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    select
      min(v1),
      (select max(v2) + v3 from t2)  -- access to v3 is ok
    from t;
  planner_error: 'Feature is not yet implemented: correlated subquery in HAVING or SELECT with agg, Tracking issue: https://github.com/singularity-data/risingwave/issues/2275'
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select t2.x, (select x from t1 where t1.y = t2.y) from t2 where x > 100 order by t2.x limit 100;
  logical_plan: |
    LogicalProject { exprs: [t2.x, t1.x] }
      LogicalTopN { order: "[t2.x ASC]", limit: 100, offset: 0 }
        LogicalProject { exprs: [t2.x, t1.x, t2.x] }
          LogicalApply { type: LeftOuter, on: true, correlated_id: 1 }
            LogicalFilter { predicate: (t2.x > 100:Int32) }
              LogicalScan { table: t2, columns: [_row_id, x, y] }
            LogicalProject { exprs: [t1.x] }
              LogicalFilter { predicate: (t1.y = CorrelatedInputRef { index: 2, correlated_id: 1 }) }
                LogicalScan { table: t1, columns: [_row_id, x, y] }
  optimized_logical_plan: |
    LogicalTopN { order: "[t2.x ASC]", limit: 100, offset: 0 }
      LogicalProject { exprs: [t2.x, t1.x, t2.x] }
        LogicalJoin { type: LeftOuter, on: (t1.y = t2.y) }
          LogicalScan { table: t2, output_columns: [x, y], required_columns: [x, y], predicate: (t2.x > 100:Int32) }
          LogicalScan { table: t1, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t1.y = t2.y)
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.x = t2.x) AND (t1.y = t2.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalScan { table: t2, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1, t2 where exists(select x from t3 where t3.x = t1.x and t3.y <> t2.y);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t3.x = t1.x) AND (t3.y <> t2.y) }
      LogicalJoin { type: Inner, on: true }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalScan { table: t2, columns: [x, y] }
      LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1, t2 where exists(select x from t3 where t3.x = t2.y and t3.y = t1.x);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t3.x = t2.y) AND (t3.y = t1.x) }
      LogicalJoin { type: Inner, on: true }
        LogicalScan { table: t1, columns: [x, y] }
        LogicalScan { table: t2, columns: [x, y] }
      LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    create table t4(x int, y int, z int);
    select * from t1, t2, t3 where exists(select x from t4 where t4.x = t2.y and t4.y = t1.x and t4.z = t3.x);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t4.x = t2.y) AND (t4.y = t1.x) AND (t4.z = t3.x) }
      LogicalJoin { type: Inner, on: true }
        LogicalJoin { type: Inner, on: true }
          LogicalScan { table: t1, columns: [x, y] }
          LogicalScan { table: t2, columns: [x, y] }
        LogicalScan { table: t3, columns: [x, y] }
      LogicalScan { table: t4, columns: [x, y, z] }
- sql: |
    create table a(a1 int, a2 int, a3 int);
    create table b(b1 int, b2 int, b3 int);
    create table c(c1 int, c2 int, c3 int);
    select count(*) from a, b where a3 = b2 and 3 = (select count(*) from c where b2 = c2 and a3 = c3);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.a3 = c.c3) AND (b.b2 = c.c2) }
        LogicalJoin { type: Inner, on: (a.a3 = b.b2) }
          LogicalScan { table: a, columns: [a3] }
          LogicalScan { table: b, columns: [b2] }
        LogicalProject { exprs: [c.c3, c.c2] }
          LogicalFilter { predicate: (3:Int32 = count) }
            LogicalAgg { group_key: [c.c3, c.c2], aggs: [count] }
              LogicalProject { exprs: [c.c3, c.c2] }
                LogicalScan { table: c, columns: [c2, c3] }
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.x=3 and a.y = (select count(*) from b where b.z = a.z and a.x = 3);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.x = a.x) AND (a.z = a.z) AND (a.y::Int64 = count) }
        LogicalProject { exprs: [a.x, a.z, a.y::Int64] }
          LogicalScan { table: a, output_columns: [x, y, z], required_columns: [x, y, z], predicate: (a.x = 3:Int32) }
        LogicalAgg { group_key: [a.x, a.z], aggs: [count] }
          LogicalJoin { type: Inner, on: (b.z = a.z) }
            LogicalAgg { group_key: [a.x, a.z], aggs: [] }
              LogicalScan { table: a, output_columns: [x, z], required_columns: [x, z], predicate: (a.x = 3:Int32) }
            LogicalScan { table: b, columns: [z] }
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.x=3 and a.y = (select count(*) from b where b.z = a.z);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.z = b.z) AND (a.y::Int64 = count) }
        LogicalProject { exprs: [a.z, a.y::Int64] }
          LogicalScan { table: a, output_columns: [y, z], required_columns: [y, z, x], predicate: (a.x = 3:Int32) }
        LogicalAgg { group_key: [b.z], aggs: [count] }
          LogicalScan { table: b, columns: [z] }
- sql: |
    create table a(x int, y varchar, z int);
    create table b(x varchar, y int, z int);
    select count(*) from a where a.y = (select string_agg(x order by x) from b where b.z = a.z);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.z = b.z) AND (a.y = string_agg(b.x order_by(b.x ASC NULLS LAST))) }
        LogicalScan { table: a, columns: [y, z] }
        LogicalAgg { group_key: [b.z], aggs: [string_agg(b.x order_by(b.x ASC NULLS LAST))] }
          LogicalProject { exprs: [b.z, b.x] }
            LogicalScan { table: b, columns: [x, z] }
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.y = (select count(distinct x) from b where b.z = a.z);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.z = b.z) AND (a.y::Int64 = count(b.x) filter((flag = 0:Int64))) }
        LogicalProject { exprs: [a.z, a.y::Int64] }
          LogicalScan { table: a, columns: [y, z] }
        LogicalAgg { group_key: [b.z], aggs: [count(b.x) filter((flag = 0:Int64))] }
          LogicalAgg { group_key: [b.z, b.x, flag], aggs: [] }
            LogicalExpand { column_subsets: [[b.z, b.x]] }
              LogicalProject { exprs: [b.z, b.x] }
                LogicalScan { table: b, columns: [x, z] }
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.y = (select count(x) filter(where x < 100) from b where b.z = a.z);
  optimized_logical_plan: |
    LogicalAgg { aggs: [count] }
      LogicalJoin { type: Inner, on: (a.z = b.z) AND (a.y::Int64 = count(b.x) filter((b.x < 100:Int32))) }
        LogicalProject { exprs: [a.z, a.y::Int64] }
          LogicalScan { table: a, columns: [y, z] }
        LogicalAgg { group_key: [b.z], aggs: [count(b.x) filter((b.x < 100:Int32))] }
          LogicalProject { exprs: [b.z, b.x] }
            LogicalScan { table: b, columns: [x, z] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t2.y in (select t3.y from t3 where t1.x = t3.x));
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.x = t2.x) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: LeftSemi, on: (t2.y = t3.y) AND (t2.x = t3.x) }
        LogicalScan { table: t2, columns: [x, y] }
        LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: Inner, on: (t2.x = t3.x) AND (t1.y = t3.y) }
        LogicalJoin { type: Inner, on: (t1.y = t1.y) }
          LogicalJoin { type: Inner, on: (t1.y = t2.y) }
            LogicalAgg { group_key: [t1.y], aggs: [] }
              LogicalScan { table: t1, columns: [y] }
            LogicalScan { table: t2, columns: [x, y] }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
        LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where t1.y in (select t1.y from t2 where t1.x = t2.x);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t1.y) AND (t1.x = t1.x) AND (t1.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalProject { exprs: [t1.x, t1.y, t1.y] }
        LogicalJoin { type: Inner, on: (t1.x = t2.x) }
          LogicalAgg { group_key: [t1.x, t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [x, y] }
          LogicalScan { table: t2, columns: [x] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where not exists(select x from t2 where t1.x = t2.x and t2.y not in (select t3.y from t3 where t1.x = t3.x));
  optimized_logical_plan: |
    LogicalJoin { type: LeftAnti, on: (t1.x = t2.x) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: LeftAnti, on: (t2.y = t3.y) AND (t2.x = t3.x) }
        LogicalScan { table: t2, columns: [x, y] }
        LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 left join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: LeftOuter, on: (t1.y = t2.y) AND (t2.x = t3.x) AND (t1.y = t3.y) AND (t1.y = t1.y) }
        LogicalJoin { type: Inner, on: true }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t2, columns: [x, y] }
        LogicalJoin { type: Inner, on: true }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 right join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: RightOuter, on: (t2.x = t3.x) AND (t1.y = t3.y) AND (t1.y = t1.y) }
        LogicalJoin { type: Inner, on: (t1.y = t2.y) }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t2, columns: [x, y] }
        LogicalJoin { type: Inner, on: true }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 full join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.y = t1.y) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: FullOuter, on: (t1.y = t2.y) AND (t2.x = t3.x) AND (t1.y = t3.y) AND (t1.y = t1.y) }
        LogicalJoin { type: Inner, on: true }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t2, columns: [x, y] }
        LogicalJoin { type: Inner, on: true }
          LogicalAgg { group_key: [t1.y], aggs: [] }
            LogicalScan { table: t1, columns: [y] }
          LogicalScan { table: t3, columns: [x, y] }
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t2.y in (select t3.y + t2.y from t3 where t1.x = t3.x));
  optimized_logical_plan: |
    LogicalJoin { type: LeftSemi, on: (t1.x = t2.x) }
      LogicalScan { table: t1, columns: [x, y] }
      LogicalJoin { type: LeftSemi, on: (t2.y = (t3.y + t2.y)) AND (t2.y = t2.y) AND (t2.x = t3.x) }
        LogicalScan { table: t2, columns: [x, y] }
        LogicalProject { exprs: [t3.x, t2.y, (t3.y + t2.y)] }
          LogicalJoin { type: Inner, on: true }
            LogicalAgg { group_key: [t2.y], aggs: [] }
              LogicalScan { table: t2, columns: [y] }
            LogicalScan { table: t3, columns: [x, y] }
